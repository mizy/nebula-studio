{"MATCH":"Example: (v)\nDescription: You can use a user-defined variable in a pair of parentheses to represent a vertex in a pattern. For example: (v).\n\nExample: MATCH (v:player) RETURN v\nDescription: You can specify a tag with :<tag_name> after the vertex in a pattern.\n\nExample: MATCH (v:player:team) RETURN v\nDescription: To match vertices with multiple tags, use colons (:).\n\nExample: MATCH (v:player{name:\"Tim Duncan\"}) RETURN v  MATCH (v) WITH v, properties(v) as props, keys(properties(v)) as kk WHERE [i in kk where props[i] == \"Tim Duncan\"] RETURN v\nDescription: You can specify a vertex property with {<prop_name>: <prop_value>} after the tag in a pattern; or use a vertex property value to get vertices directly.\n\nExample: MATCH (v) WHERE id(v) == 'player101' RETURN v\nDescription: You can use the VID to match a vertex. The id() function can retrieve the VID of a vertex.\n\nExample: MATCH (v:player { name: 'Tim Duncan' })--(v2) WHERE id(v2) IN [\"player101\", \"player102\"] RETURN v2\nDescription: To match multiple VIDs, use WHERE id(v) IN [vid_list].\n\nExample: MATCH (v:player{name:\"Tim Duncan\"})--(v2) RETURN v2.player.name AS Name\nDescription: You can use the -- symbol to represent edges of both directions and match vertices connected by these edges. You can add a > or < to the -- symbol to specify the direction of an edge.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) RETURN p\nDescription: Connected vertices and edges form a path. You can use a user-defined variable to name a path as follows.\n\nExample: MATCH (v:player{name:\"Tim Duncan\"})-[e]-(v2) RETURN eMATCH ()<-[e]-() RETURN e\nDescription: Besides using --, -->, or <-- to indicate a nameless edge, you can use a user-defined variable in a pair of square brackets to represent a named edge. For example: -[e]-.\n\nExample: MATCH ()-[e:follow]-() RETURN e\nDescription: Just like vertices, you can specify an edge type with :<edge_type> in a pattern. For example: -[e:follow]-.\n\nExample: MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2) RETURN e MATCH ()-[e]->() WITH e, properties(e) as props, keys(properties(e)) as kk WHERE [i in kk where props[i] == 90] RETURN e\nDescription: You can specify edge type properties with {<prop_name>: <prop_value>} in a pattern. For example: [e:follow{likeness:95}]; or use an edge type property value to get edges directly.\n\nExample: MATCH (v:player{name:\"Tim Duncan\"})-[e:follow | :serve]->(v2) RETURN e\nDescription: The | symbol can help matching multiple edge types. For example: [e:follow|:serve]. The English colon (:) before the first edge type cannot be omitted, but the English colon before the subsequent edge type can be omitted, such as [e:follow|serve].\n\nExample: MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3) RETURN v2, v3\nDescription: You can extend a pattern to match multiple edges in a path.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2) RETURN DISTINCT v2 AS Friends\nDescription: You can use the :<edge_type>*<hop> pattern to match a fixed-length path. hop must be a non-negative integer. The data type of e is the list.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2) RETURN v2 AS Friends\nDescription: minHop: Optional. It represents the minimum length of the path. minHop: must be a non-negative integer. The default value is 1.minHop and maxHop are optional and the default value is 1 and infinity respectively. The data type of e is the list.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow | serve*2]->(v2) RETURN DISTINCT v2\nDescription: You can specify multiple edge types in a fixed-length or variable-length pattern. In this case, hop, minHop, and maxHop take effect on all edge types. The data type of e is the list.\n\nExample: MATCH (v:player{name:\"Tim Duncan\"}) RETURN vMATCH (v:player{name:\"Tim Duncan\"})-[e]->(v2) RETURN e\nDescription: Use RETURN {<vertex_name> | <edge_name>} to retrieve all the information of a vertex or an edge.\n\nExample: MATCH (v:player{name:\"Tim Duncan\"}) RETURN id(v)\nDescription: Use the id() function to retrieve VIDs.\n\nExample: MATCH (v:player{name:\"Tim Duncan\"}) RETURN labels(v)\nDescription: Use the labels() function to retrieve the list of tags on a vertex.To retrieve the nth element in the labels(v) list, use labels(v)[n-1].\n\nExample: MATCH (v:player{name:\"Tim Duncan\"}) RETURN v.player.age\nDescription: Use RETURN {<vertex_name> | <edge_name>}.<property> to retrieve a single property.Use AS to specify an alias for a property.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2) RETURN properties(v2)\nDescription: Use the properties() function to retrieve all properties on a vertex or an edge.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[e]->() RETURN DISTINCT type(e)\nDescription: Use the type() function to retrieve the matched edge types.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[*3]->() RETURN p\nDescription: Use RETURN <path_name> to retrieve all the information of the matched paths.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2) RETURN nodes(p)\nDescription: Use the nodes() function to retrieve all vertices in a path.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2) RETURN relationships(p)\nDescription: Use the relationships() function to retrieve all edges in a path.\n\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})-[*..2]->(v2) RETURN p AS Paths, length(p) AS Length\nDescription: Use the length() function to retrieve the length of a path.\n","OPTIONAL MATCH":"Example: MATCH (m)-[]->(n) WHERE id(m)==\"player100\" OPTIONAL MATCH (n)-[]->(l) RETURN id(m),id(n),id(l)\nDescription: If no matches are found, OPTIONAL MATCH will use a null for missing parts of the pattern.\n","LOOKUP":"Example: LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD player.name AS name, player.age AS age\nDescription: The following example returns vertices whose name is Tony Parker and the tag is player.\n\nExample: LOOKUP ON follow WHERE follow.degree == 90 YIELD follow.degree\nDescription: Returns edges whose degree is 90 and the edge type is follow.\n\nExample: LOOKUP ON player YIELD properties(vertex),id(vertex)\nDescription: Shows how to retrieve the VID of all vertices tagged with player.\n\nExample: LOOKUP ON follow YIELD edge AS e\nDescription: Shows how to retrieve the source Vertex IDs, destination vertex IDs, and ranks of all edges of the follow edge type.\n\nExample: LOOKUP ON player YIELD id(vertex)| YIELD COUNT(*) AS Player_Count\nDescription: Shows how to count the number of vertices tagged with player.\n\nExample: LOOKUP ON follow YIELD edge as e| YIELD COUNT(*) AS Like_Count\nDescription: Shows how to count the number of edges of the follow edge type.\n","GO":"Example: GO FROM \"player102\" OVER serve YIELD dst(edge)\nDescription: Returns the teams that player 102 serves.\n\nExample: GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)\nDescription: Returns the friends of player 102 with 2 hops.\n\nExample: GO FROM \"player100\", \"player102\" OVER serve WHERE properties(edge).start_year > 1995 YIELD DISTINCT properties($$).name AS team_name, properties(edge).start_year AS start_year, properties($^).name AS player_name\nDescription: Adds a filter for the traversal.\n\nExample: GO FROM \"player100\" OVER follow, serve YIELD properties(edge).degree, properties(edge).start_year\nDescription: The following example traverses along with multiple edge types. If there is no value for a property, the output is NULL.\n\nExample: GO FROM \"player100\" OVER follow REVERSELY YIELD src(edge) AS destination\nDescription: The following example returns the neighbor vertices in the incoming direction of player 100.\n\nExample: GO FROM \"player100\" OVER follow REVERSELY YIELD src(edge) AS id | GO FROM $-.id OVER serve WHERE properties($^).age > 20 YIELD properties($^).name AS FriendOf, properties($$).name AS Team\nDescription: The following example retrieves the friends of player 100 and the teams that they serve.\n\nExample: GO FROM \"player102\" OVER follow YIELD dst(edge) AS both\nDescription: The following example returns all the neighbor vertices of player 102.\n\nExample: GO 2 STEPS FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst, properties($$).age AS age | GROUP BY $-.dst YIELD $-.dst AS dst, collect_set($-.src) AS src, collect($-.age) AS age\nDescription: The following example the outputs according to age.\n","Fetch vertex properties":"Example: FETCH PROP ON player \"player100\" YIELD properties(vertex)\nDescription: Specify a tag in the FETCH statement to fetch the vertex properties by that tag.\n\nExample: FETCH PROP ON player \"player100\" YIELD player.name AS name\nDescription: Use a YIELD clause to specify the properties to be returned.\n\nExample: FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)\nDescription: Specify multiple VIDs (vertex IDs) to fetch properties of multiple vertices. Separate the VIDs with commas.\n\nExample: FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD properties(vertex)\nDescription: Specify multiple tags in the FETCH statement to fetch the vertex properties by the tags. Separate the tags with commas.\n\nExample: FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD properties(vertex)\nDescription: Set an asterisk symbol * to fetch properties by all tags in the current graph space.\n","Fetch edge properties":"Example: FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)\nDescription: The following statement fetches all the properties of the serve edge that connects vertex \"player100\" and vertex \"team204\".\n\nExample: FETCH PROP ON serve \"player100\" -> \"team204\" YIELD serve.start_year\nDescription: Use a YIELD clause to fetch specific properties of an edge.\n\nExample: FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD properties(edge)\nDescription: Specify multiple edge patterns (<src_vid> -> <dst_vid>[@<rank>]) to fetch properties of multiple edges. Separate the edge patterns with commas.\n\nExample: FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD properties(edge)\nDescription: To fetch on an edge whose rank is not 0, set its rank in the FETCH statement.\n\nExample: GO FROM \"player101\" OVER follow YIELD follow._src AS s, follow._dst AS d | FETCH PROP ON follow $-.s -> $-.d YIELD follow.degree\nDescription: The following statement returns the degree values of the follow edges that start from vertex \"player101\".\n\nExample: $var = GO FROM \"player101\" OVER follow YIELD follow._src AS s, follow._dst AS d; FETCH PROP ON follow $var.s -> $var.d YIELD follow.degree\nDescription: You can use user-defined variables to construct similar queries.\n","SHOW":"Syntax: SHOW CHARSET\nExample: SHOW CHARSET\nDescription: Shows the available character sets.\n\nSyntax: SHOW COLLATION\nExample: SHOW COLLATION\nDescription: Shows the collations supported by NebulaGraph.\n\nSyntax: SHOW CREATE SPACE <space_name>\nExample: SHOW CREATE SPACE basketballplayer\nDescription: Shows the creating statement of the specified graph space.\n\nSyntax: SHOW CREATE {TAG <tag_name> | EDGE <edge_name>}\nExample: SHOW CREATE TAG player\nDescription: Shows the basic information of the specified tag.\n\nSyntax: SHOW HOSTS [GRAPH | STORAGE | META]\nExample: SHOW HOSTSSHOW HOSTS GRAPH\nDescription: Shows the host and version information of Graph Service, Storage Service, and Meta Service.\n\nSyntax: SHOW {TAG | EDGE} INDEX STATUS\nExample: SHOW TAG INDEX STATUS\nDescription: Shows the status of jobs that rebuild native indexes, which helps check whether a native index is successfully rebuilt or not.\n\nSyntax: SHOW {TAG | EDGE} INDEXES\nExample: SHOW TAG INDEXES\nDescription: Shows the names of existing native indexes.\n\nSyntax: SHOW PARTS [<part_id>]\nExample: SHOW PARTS\nDescription: Shows the information of a specified partition or all partitions in a graph space.\n\nSyntax: SHOW ROLES IN <space_name>\nExample: SHOW ROLES in basketballplayer\nDescription: Shows the roles that are assigned to a user account.\n\nSyntax: SHOW SNAPSHOTS\nExample: SHOW SNAPSHOTS\nDescription: Shows the information of all the snapshots.\n\nSyntax: SHOW SPACES\nExample: SHOW SPACES\nDescription: Shows existing graph spaces in NebulaGraph.\n\nSyntax: SHOW STATS\nExample: SHOW STATS\nDescription: Shows the statistics of the graph space collected by the latest STATS job.\n\nSyntax: SHOW TAGS | EDGES\nExample: SHOW TAGS,SHOW EDGES\nDescription: Shows all the tags in the current graph space.\n\nSyntax: SHOW USERS\nExample: SHOW USERS\nDescription: Shows the user information.\n\nSyntax: SHOW SESSIONS\nExample: SHOW SESSIONS\nDescription: Shows the information of all the sessions.\n\nSyntax: SHOW SESSION <Session_Id>\nExample: SHOW SESSION 1623304491050858\nDescription: Shows a specified session with its ID.\n\nSyntax: SHOW [ALL] QUERIES\nExample: SHOW QUERIES\nDescription: Shows the information of working queries in the current session.\n\nSyntax: SHOW META LEADER\nExample: SHOW META LEADER\nDescription: Shows the information of the leader in the current Meta cluster.\n","Clauses and options":"Syntax: GROUP BY <var> YIELD <var>, <aggregation_function(var)>\nExample: GO FROM \"player100\" OVER follow BIDIRECT YIELD $$.player.name as Name | GROUP BY $-.Name YIELD $-.Name as Player, count(*) AS Name_Count\nDescription: Finds all the vertices connected directly to vertex \"player100\", groups the result set by player names, and counts how many times the name shows up in the result set.\n\nSyntax: YIELD <var> [| LIMIT [<offset_value>,] <number_rows>]\nExample: GO FROM \"player100\" OVER follow REVERSELY YIELD $$.player.name AS Friend, $$.player.age AS Age | ORDER BY $-.Age, $-.Friend | LIMIT 1, 3\nDescription: Returns the 3 rows of data starting from the second row of the sorted output.\n\nSyntax: RETURN <var> [SKIP <offset>] [LIMIT <number_rows>]\nExample: MATCH (v:player{name:\"Tim Duncan\"}) --> (v2) RETURN v2.player.name AS Name, v2.player.age AS Age ORDER BY Age DESC SKIP 1\nDescription: SKIP can be used alone to set the offset and return the data after the specified position.\n\nSyntax: <go_statement> SAMPLE <sample_list>;\nExample: GO 3 STEPS FROM \"player100\" OVER * YIELD properties($$).name AS NAME, properties($$).age AS Age SAMPLE [1,2,3];\nDescription: Takes samples evenly in the result set and returns the specified amount of data.\n\nSyntax: <YIELD clause> ORDER BY <expression> [ASC | DESC] [, <expression> [ASC | DESC] ...]\nExample: FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\" YIELD player.age AS age, player.name AS name | ORDER BY $-.age ASC, $-.name DESC\nDescription: The ORDER BY clause specifies the order of the rows in the output.\n\nSyntax: RETURN {<vertex_name>|<edge_name>|<vertex_name>.<property>|<edge_name>.<property>|...}\nExample: MATCH (v:player) RETURN v.player.name, v.player.age LIMIT 3\nDescription: Returns the first three rows with values of the vertex properties name and age.\n\nSyntax: CREATE TAG <tag_name>(<property_name_1> <property_value_1>, <property_name_2> <property_value_2>, ...) ttl_duration= <value_int>, ttl_col = <property_name>\nExample: CREATE TAG t2(a int, b int, c string) ttl_duration= 100, ttl_col = \"a\"\nDescription: Create a tag and set the TTL options.\n\nSyntax: WHERE {<vertex|edge_alias>.<property_name> {>|==|<|...} <value>...}\nExample: MATCH (v:player) WHERE v.player.name == \"Tim Duncan\" XOR (v.player.age < 30 AND v.player.name == \"Yao Ming\") OR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\") RETURN v.player.name, v.player.age\nDescription: The WHERE clause filters the output by conditions. The WHERE clause usually works in Native nGQL GO and LOOKUP statements, and OpenCypher MATCH and WITH statements.\n\nSyntax: YIELD [DISTINCT] <col> [AS <alias>] [, <col> [AS <alias>] ...] [WHERE <conditions>];\nExample: GO FROM \"player100\" OVER follow YIELD dst(edge) AS ID | FETCH PROP ON player $-.ID YIELD player.age AS Age | YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends\nDescription: Finds the players that \"player100\" follows and calculates their average age.\n\nSyntax: MATCH $expressions WITH {nodes()|labels()|...}\nExample: MATCH p=(v:player{name:\"Tim Duncan\"})--() WITH nodes(p) AS n UNWIND n AS n1 RETURN DISTINCT n1\nDescription: The WITH clause can retrieve the output from a query part, process it, and pass it to the next query part as the input.\n\nSyntax: UNWIND <list> AS <alias> <RETURN clause>\nExample: UNWIND [1,2,3] AS n RETURN n\nDescription: Splits a list into rows.\n","Space statements":"Syntax: CREATE SPACE [IF NOT EXISTS] <graph_space_name> ( [partition_num = <partition_number>,] [replica_factor = <replica_number>,] vid_type = {FIXED_STRING(<N>) | INT[64]} ) [COMMENT = '<comment>']\nExample: CREATE SPACE my_space_1 (vid_type=FIXED_STRING(30))\nDescription: Creates a graph space with\n\nSyntax: CREATE SPACE <new_graph_space_name> AS <old_graph_space_name>\nExample: CREATE SPACE my_space_4 as my_space_3\nDescription: Clone a graph. space.\n\nSyntax: USE <graph_space_name>\nExample: USE space1\nDescription: Specifies a graph space as the current working graph space for subsequent queries.\n\nSyntax: SHOW SPACES\nExample: SHOW SPACES\nDescription: Lists all the graph spaces in the NebulaGraph examples.\n\nSyntax: DESC[RIBE] SPACE <graph_space_name>\nExample: DESCRIBE SPACE basketballplayer\nDescription: Returns the information about the specified graph space.\n\nSyntax: CLEAR SPACE [IF EXISTS] <graph_space_name>\nExample: Deletes the vertices and edges in a graph space, but does not delete the graph space itself and the schema information.\n\nSyntax: DROP SPACE [IF EXISTS] <graph_space_name>\nExample: DROP SPACE basketballplayer\nDescription: Deletes everything in the specified graph space.\n","TAG statements":"Syntax: CREATE TAG [IF NOT EXISTS] <tag_name> ( <prop_name> <data_type> [NULL | NOT NULL] [DEFAULT <default_value>] [COMMENT '<comment>'] [{, <prop_name> <data_type> [NULL |  NOT NULL] [DEFAULT <default_value>] [COMMENT '<comment>']} ...] ) [TTL_DURATION = <ttl_duration>] [TTL_COL = <prop_name>] [COMMENT = '<comment>']\nExample: CREATE TAG woman(name string, age int, married bool, salary double, create_time timestamp) TTL_DURATION = 100, TTL_COL = \"create_time\"\nDescription: Creates a tag with the given name in a graph space.\n\nSyntax: DROP TAG [IF EXISTS] <tag_name>\nExample: DROP TAG test;\nDescription: Drops a tag with the given name in the current working graph space.\n\nSyntax: ALTER TAG <tag_name>    <alter_definition> [, alter_definition] ...]    [ttl_definition [, ttl_definition] ... ]    [COMMENT = '<comment>']\nExample: ALTER TAG t1 ADD (p3 int, p4 string)\nDescription: Alters the structure of a tag with the given name in a graph space. You can add or drop properties, and change the data type of an existing property. You can also set a TTL (Time-To-Live) on a property, or change its TTL duration.\n\nSyntax: SHOW TAGS\nExample: SHOW TAGS\nDescription: Shows the name of all tags in the current graph space.\n\nSyntax: DESC[RIBE] TAG <tag_name>\nExample: DESCRIBE TAG player\nDescription: Returns the information about a tag with the given name in a graph space, such as field names, data type, and so on.\n\nSyntax: DELETE TAG <tag_name_list> FROM <VID>\nExample: DELETE TAG test1 FROM \"test\"\nDescription: Deletes a tag with the given name on a specified vertex.\n","Edge type statements":"Syntax: CREATE EDGE [IF NOT EXISTS] <edge_type_name>    ( <prop_name> <data_type> [NULL | NOT NULL] [DEFAULT <default_value>] [COMMENT '<comment>'] [{, <prop_name> <data_type> [NULL | NOT NULL] [DEFAULT <default_value>] [COMMENT '<comment>']} ...] ) [TTL_DURATION = <ttl_duration>] [TTL_COL = <prop_name>] [COMMENT = '<comment>']\nExample: CREATE EDGE e1(p1 string, p2 int, p3 timestamp) TTL_DURATION = 100, TTL_COL = \"p2\"\nDescription: Creates an edge type with the given name in a graph space.\n\nSyntax: DROP EDGE [IF EXISTS] <edge_type_name>\nExample: DROP EDGE e1\nDescription: Drops an edge type with the given name in a graph space.\n\nSyntax: ALTER EDGE <edge_type_name>    <alter_definition> [, alter_definition] ...]    [ttl_definition [, ttl_definition] ... ]    [COMMENT = '<comment>']\nExample: ALTER EDGE e1 ADD (p3 int, p4 string)\nDescription: Alters the structure of an edge type with the given name in a graph space.\n\nSyntax: SHOW EDGES\nExample: SHOW EDGES\nDescription: Shows all edge types in the current graph space.\n\nSyntax: DESC[RIBE] EDGE <edge_type_name>\nExample: DESCRIBE EDGE follow\nDescription: Returns the information about an edge type with the given name in a graph space, such as field names, data type, and so on.\n","Vertex statements":"Syntax: INSERT VERTEX [IF NOT EXISTS] [tag_props, [tag_props] ...] VALUES <vid>: ([prop_value_list])\nExample: INSERT VERTEX t2 (name, age) VALUES \"13\":(\"n3\", 12), \"14\":(\"n4\", 8)\nDescription: Inserts one or more vertices into a graph space in NebulaGraph.\n\nSyntax: DELETE VERTEX <vid> [, <vid> ...]\nExample: DELETE VERTEX \"team1\"\nDescription: Deletes vertices and the related incoming and outgoing edges of the vertices.\n\nSyntax: UPDATE VERTEX ON <tag_name> <vid> SET <update_prop> [WHEN <condition>] [YIELD <output>]\nExample: UPDATE VERTEX ON player \"player101\" SET age = age + 2\nDescription: Updates properties on tags of a vertex.\n\nSyntax: UPSERT VERTEX ON <tag> <vid> SET <update_prop> [WHEN <condition>] [YIELD <output>]\nExample: UPSERT VERTEX ON player \"player667\" SET age = 31\nDescription: The UPSERT statement is a combination of UPDATE and INSERT. You can use UPSERT VERTEX to update the properties of a vertex if it exists or insert a new vertex if it does not exist.\n","Edge statements":"Syntax: INSERT EDGE [IF NOT EXISTS] <edge_type> ( <prop_name_list> ) VALUES <src_vid> -> <dst_vid>[@<rank>] : ( <prop_value_list> ) [, <src_vid> -> <dst_vid>[@<rank>] : ( <prop_value_list> ), ...]\nExample: INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 1)\nDescription: Inserts an edge or multiple edges into a graph space from a source vertex (given by src_vid) to a destination vertex (given by dst_vid) with a specific rank in NebulaGraph.\n\nSyntax: DELETE EDGE <edge_type> <src_vid> -> <dst_vid>[@<rank>] [, <src_vid> -> <dst_vid>[@<rank>] ...]\nExample: DELETE EDGE serve \"player100\" -> \"team204\"@0\nDescription: Deletes one edge or multiple edges at a time.\n\nSyntax: UPDATE EDGE ON <edge_type> <src_vid> -> <dst_vid> [@<rank>] SET <update_prop> [WHEN <condition>] [YIELD <output>]\nExample: UPDATE EDGE ON serve \"player100\" -> \"team204\"@0 SET start_year = start_year + 1\nDescription: Updates properties on an edge.\n\nSyntax: UPSERT EDGE ON <edge_type> <src_vid> -> <dst_vid> [@rank] SET <update_prop> [WHEN <condition>] [YIELD <properties>]\nExample: UPSERT EDGE on serve \"player666\" -> \"team200\"@0 SET end_year = 2021\nDescription: The UPSERT statement is a combination of UPDATE and INSERT. You can use UPSERT EDGE to update the properties of an edge if it exists or insert a new edge if it does not exist.\n","Native index":"Syntax: CREATE {TAG | EDGE} INDEX [IF NOT EXISTS] <index_name> ON {<tag_name> | <edge_name>} ([<prop_name_list>]) [COMMENT = '<comment>']\nExample: CREATE TAG INDEX player_index on player()\nDescription: Add native indexes for the existing tags, edge types, or properties.\n\nSyntax: SHOW CREATE {TAG | EDGE} INDEX <index_name>\nExample: show create tag index index_2\nDescription: Shows the statement used when creating a tag or an edge type. It contains detailed information about the index, such as its associated properties.\n\nSyntax: SHOW {TAG | EDGE} INDEXES\nExample: SHOW TAG INDEXES\nDescription: Shows the defined tag or edge type indexes names in the current graph space.\n\nSyntax: DESCRIBE {TAG | EDGE} INDEX <index_name>\nExample: DESCRIBE TAG INDEX player_index_0\nDescription: Gets the information about the index with a given name, including the property name (Field) and the property type (Type) of the index.\n\nSyntax: REBUILD {TAG | EDGE} INDEX [<index_name_list>]\nExample: REBUILD TAG INDEX single_person_index\nDescription: Rebuilds the created tag or edge type index. If data is updated or inserted before the creation of the index, you must rebuild the indexes manually to make sure that the indexes contain the previously added data.\n\nSyntax: SHOW {TAG | EDGE} INDEX STATUS\nExample: SHOW TAG INDEX STATUS\nDescription: Returns the name of the created tag or edge type index and its status.\n\nSyntax: DROP {TAG | EDGE} INDEX [IF EXISTS] <index_name>\nExample: DROP TAG INDEX player_index_0\nDescription: Removes an existing index from the current graph space.\n","Full-text index":"Syntax: SIGN IN TEXT SERVICE [(<elastic_ip:port> [,<username>, <password>]), (<elastic_ip:port>), ...]\nExample: SIGN IN TEXT SERVICE (127.0.0.1:9200)\nDescription: The full-text indexes is implemented based on Elasticsearch. After deploying an Elasticsearch cluster, you can use the SIGN IN statement to log in to the Elasticsearch client.\n\nSyntax: SHOW TEXT SEARCH CLIENTS\nExample: SHOW TEXT SEARCH CLIENTS\nDescription: Shows text search clients.\n\nSyntax: SIGN OUT TEXT SERVICE\nExample: SIGN OUT TEXT SERVICE\nDescription: Signs out to the text search clients.\n\nSyntax: CREATE FULLTEXT {TAG | EDGE} INDEX <index_name> ON {<tag_name> | <edge_name>} (<prop_name> [,<prop_name>]...) [ANALYZER=\"<analyzer_name>\"]\nExample: CREATE FULLTEXT TAG INDEX nebula_index_1 ON player(name)\nDescription: Creates full-text indexes.\n\nSyntax: SHOW FULLTEXT INDEXES\nExample: SHOW FULLTEXT INDEXES\nDescription: Show full-text indexes.\n\nSyntax: REBUILD FULLTEXT INDEX\nExample: REBUILD FULLTEXT INDEX\nDescription: Rebuild full-text indexes.\n\nSyntax: DROP FULLTEXT INDEX <index_name>\nExample: DROP FULLTEXT INDEX nebula_index_1\nDescription: Drop full-text indexes.\n\nSyntax: LOOKUP ON {<tag> | <edge_type>} WHERE ES_QUERY(<index_name>, \"<text>\") YIELD <return_list> [| LIMIT [<offset>,] <number_rows>]\nExample: LOOKUP ON player WHERE ES_QUERY(fulltext_index_1,\"Chris\") YIELD id(vertex)\nDescription: Use query options.\n","Subgraph and path statements":"Syntax: GET SUBGRAPH [WITH PROP] [<step_count> {STEP|STEPS}] FROM {<vid>, <vid>...} [{IN | OUT | BOTH} <edge_type>, <edge_type>...] YIELD [VERTICES AS <vertex_alias>] [,EDGES AS <edge_alias>]\nExample: GET SUBGRAPH 1 STEPS FROM \"player100\" YIELD VERTICES AS nodes, EDGES AS relationships\nDescription: Retrieves information of vertices and edges reachable from the source vertices of the specified edge types and returns information of the subgraph.\n\nSyntax: FIND { SHORTEST | ALL | NOLOOP } PATH [WITH PROP] FROM <vertex_id_list> TO <vertex_id_list> OVER <edge_type_list> [REVERSELY | BIDIRECT] [<WHERE clause>] [UPTO <N> {STEP|STEPS}] YIELD path as <alias> [| ORDER BY $-.path] [| LIMIT <M>]\nExample: FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path as p\nDescription: Finds the paths between the selected source vertices and destination vertices. A returned path is like (<vertex_id>)-[:<edge_type_name>@<rank>]->(<vertex_id).\n","Query tuning statements":"Syntax: EXPLAIN [format=\"row\" | \"dot\"] <your_nGQL_statement>\nExample: EXPLAIN format=\"row\" SHOW TAGSEXPLAIN format=\"dot\" SHOW TAGS\nDescription: Helps output the execution plan of an nGQL statement without executing the statement.\n\nSyntax: PROFILE [format=\"row\" | \"dot\"] <your_nGQL_statement>\nExample: PROFILE format=\"row\" SHOW TAGSEXPLAIN format=\"dot\" SHOW TAGS\nDescription: Executes the statement, then outputs the execution plan as well as the execution profile.\n","SUBMIT JOB BALANCE":"Syntax: BALANCE LEADER\nDescription: Starts a job to balance the distribution of all the storage leaders in graph spaces. It returns the job ID.\n","Job statements":"Syntax: SUBMIT JOB COMPACT\nDescription: Triggers the long-term RocksDB compact operation.\n\nSyntax: SUBMIT JOB FLUSH\nDescription: Writes the RocksDB memfile in the memory to the hard disk.\n\nSyntax: SUBMIT JOB STATS\nDescription: Starts a job that makes the statistics of the current graph space. Once this job succeeds, you can use the SHOW STATS statement to list the statistics.\n\nSyntax: SHOW JOB <job_id>\nDescription: Shows the information about a specific job and all its tasks in the current graph space. The Meta Service parses a SUBMIT JOB request into multiple tasks and assigns them to the nebula-storaged processes.\n\nSyntax: SHOW JOBS\nDescription: Lists all the unexpired jobs in the current graph space.\n\nSyntax: STOP JOB\nDescription: Stops jobs that are not finished in the current graph space.\n\nSyntax: RECOVER JOB\nDescription: Re-executes the failed jobs in the current graph space and returns the number of recovered jobs.\n","Kill queries":"Syntax: KILL QUERY (session=<session_id>, plan=<plan_id>)\nExample: KILL QUERY(SESSION=1625553545984255,PLAN=163)\nDescription: Terminates the query being executed, and is often used to terminate slow queries.\n","Kill sessions":"Syntax: KILL {SESSION|SESSIONS} <SessionId>\nExample: KILL SESSION 1672887983842984\nDescription: Terminates a single session.\n\nSyntax: SHOW SESSIONS | YIELD $-.SessionId AS sid [WHERE <filter_clause>] | KILL {SESSION|SESSIONS} $-.sid\nExample: SHOW SESSIONS | YIELD $-.SessionId AS sid, $-.CreateTime as CreateTime | ORDER BY $-.CreateTime ASC | LIMIT 2 | KILL SESSIONS $-.sid\nDescription: Terminates multiple sessions based on specified criteria.\n\nSyntax: SHOW SESSIONS | KILL SESSIONS $-.SessionId\nExample: SHOW SESSIONS | KILL SESSIONS $-.SessionId\nDescription: Terminates all sessions.\n","util functions":"double abs(double x),double floor(double x),double ceil(double x),double round(double x),double sqrt(double x),double cbrt(double x),double hypot(double x, double y),double pow(double x, double y),double exp(double x),double exp2(double x),double log(double x),double log2(double x),double log10(double x),double sin(double x),double asin(double x),double cos(double x),double acos(double x),double tan(double x),double atan(double x),double rand(),int rand32(int min, int max),int rand64(int min, int max),bit_and(),bit_or(),bit_xor(),int size(),int range(int start, int end, int step),int sign(double x),double e(),double pi(),double radians(),avg(),count(),max(),min(),collect(),std(),sum(),int strcasecmp(string a, string b),string lower(string a),string toLower(string a),string upper(string a),string toUpper(string a),int length(a),string trim(string a),string ltrim(string a),string rtrim(string a),string left(string a, int count),string right(string a, int count),string lpad(string a, int size, string letters),string rpad(string a, int size, string letters),string substr(string a, int pos, int count),string substring(string a, int pos, int count),string reverse(string),string replace(string a, string b, string c),list split(string a, string b),concat(),concat_ws(),extract(),json_extract(),int now(),timestamp timestamp(),date date(),time time(),datetime datetime(),keys(expr),labels(vertex),nodes(path),range(start, end [, step]),relationships(path),reverse(list),tail(list),head(list),last(list),reduce(),bool toBoolean(),float toFloat(),string toString(),int toInteger(),set toSet(),int hash(),exists(),any(),all(),none(),single(),CASE,coalesce()"}